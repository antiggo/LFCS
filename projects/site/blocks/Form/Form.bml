// global variables for calculations
let price;
let characterNumber = 2500;
let currrentType = "silver";
let uploadedDocument = false;
let linksToTheDocuments = [];
let calculatedPrice;
let uploadedFiles = [];
let uploadedFilesProgress = 0; 

const emailJsService = "service_5zbkh3r";
const emailJsTemplate = "template_mjdi55g";

const sanityTokenWithWriteAccess = 'skmAQVJjHdsVFKS4TCsoiVvZIeEUN9qFw545I0JD4YSoBrD80kryUFXitu2g1peNqfrVZA1Mwcq48Sk0KOXCt8b8KnLIRAtNuDbwrAq6YoxsJFw2KtFhVYbQDGFEQNzLDCJTJaBYa4HfdL7wmz7H5FgAGtax1MlUdusEBfkeQsNvegVVlwPw';
const sanityFetchUrl = 'https://spfa8rwc.api.sanity.io/v1/assets/files/production';

const pageCharacterNumber = 2500;

const prices = {
  silver: {
    russian: {
      regular: 500,
      urgent: 750
    },
    english: {
      regular: 2000,
      urgent: 3000
    }
  },
  gold: {
    russian: {
      regular: 2500,
      urgent: 3750
    },
    english: {
      regular: 5000,
      urgent: 7500
    }
  }
}

// variable holding current selection
let pricingParams = {
  "type": "silver",
  "language" : null,
  "time": null
}

var dropzoneComponent;

Beast.decl({
    Form: {

        //set one of the params
        setPricingParam: function (key, value) {
            pricingParams[key] = value;
            this.calculateFinalPrice();

        },

        //calculate final price
        calculateFinalPrice: function () {

            // Gold or Silver type
            let type = this.param('type')
            if (type)
              pricingParams["type"] = type;
            
              if (pricingParams["language"] && pricingParams["time"]) {
                price = prices[pricingParams["type"]][pricingParams["language"]][pricingParams["time"]];

                let tmpPageCounterFloat = characterNumber/pageCharacterNumber;
                let pageCount;
                if (Number.isInteger(tmpPageCounterFloat)) {
                  pageCount = Math.floor(characterNumber/pageCharacterNumber);
                } else {
                  pageCount = Math.floor(1 + characterNumber/pageCharacterNumber);
                }

                document.querySelector(".form__action").value = price*pageCount + "₽ — отправить заявку";

                calculatedPrice = price*pageCount;

            }
        },

        calculateCharNumber: function(dropfiles) {
            
            // input for files
            var docs = document.querySelector("#file-upload");
            
            //another way to get files from dropzone
            //var dropzoneFiles = dropzoneComponent.getAcceptedFiles();

            //recalculate character number
            characterNumber = 0;
            let documentNameContainer = document.querySelector(".form__upload-doc-name");
            documentNameContainer.innerHTML = "";

            
            // if files are not selected stop
            if (docs.files.length === 0 && dropfiles.length === 0) {
                return;
            }            
            
            if (docs.files.length > 0)
              this.mergeFiles(docs.files);

            if (dropfiles && dropfiles.length > 0)
              this.mergeFiles(dropfiles);
            

            for (var i = 0; i < uploadedFiles.length; i++) {
              this.parseFile(uploadedFiles[i], i);
            }
            
          
        },

        mergeFiles: function(files){
          var fileUploadedAlready = false;
          for (var i = 0; i < files.length; i++){
            for (var k = 0; k < uploadedFiles.length; k++){
              if (uploadedFiles[k].name == files[i].name && uploadedFiles[k].size == files[i].size) {
                fileUploadedAlready = true;
                break
              }
            }
            if (!fileUploadedAlready) {
              uploadedFiles.push(files[i])
            } else {
              fileUploadedAlready = false;
            }
          }
        },

        parseFile: function(file, index) {
          var self = this

          // define reader
          var reader = new FileReader();
            
          //check extension
          let documentName = file.name;
          let ext = documentName.split('.').pop().toLowerCase();

          // supported extensions
          if (ext == "docx" || ext == "txt") {
              let documentNameContainer = document.querySelector(".form__upload-doc-name");
              documentNameContainer.innerHTML += "<div class='form__upload-filename'>" + documentName + "</div>";

              let documentUploadLabel = document.querySelector(".form__upload-label");
              documentUploadLabel.innerHTML = "Загрузить еще документы";
          }

          // if it's DOCX
          if (ext == "docx") {

              reader.readAsBinaryString(file);

              // on error
              reader.onerror = function (evt) {
                  console.log("error reading file", evt);
                  alert("Не удалось прочитать документ. Укажите количество символов вручную")
              }

              // on success
              reader.onload = function (evt) {
                  const content = evt.target.result;
                  var zip = new PizZip(content);
                  var doc = new Docxtemplater().loadZip(zip);

                  self.setCharactedNum(doc.getFullText());
              }
          } else if (ext == "txt") { 

              reader.onload = function(evt) {
                  self.setCharactedNum(evt.target.result)
              };
              
              reader.readAsText(file, "UTF-8");
              
          } else {
            uploadedFiles.splice(index, 1);
              alert('Пожалуйста, загрузите DOCX или TXT файл.')
          }
        },

        setCharactedNum: function (text) {
            // element to display char number
            var charNumber = document.querySelector(".form__hint");

            if (text && text.length > 0) {
                //set variable for char number 
                characterNumber = characterNumber + text.length;
                
                // show character number
                charNumber.innerHTML = characterNumber + " знаков";

                //calculate the price
                this.calculateFinalPrice();

                uploadedDocument = true;
            }
        },

        //upload documnent to Sanity
        updloadDocumentToSanity: function (file){

            // create reference to the file
            var src = URL.createObjectURL(file);

            //fetching
            fetch(sanityFetchUrl, {
                method: 'post',
                headers: {
                    'Content-type': file.type,
                    Authorization: 'Bearer ' + sanityTokenWithWriteAccess
                },
                body: file
              })
              .then(response => response.json())
              .then(function(data) {      
                    //set public URL link to the document in the following variable
                    if (data && data.document) {
                        linksToTheDocuments.push(data.document.url);
                        uploadedFilesProgress++;
                    }
                });
        },

        expand: function () {

            this.append(
                <form>
                    {this.get('head', 'item')}
                </form>
                
            )

        },

        domInit: function () {

            let selectors = document.querySelectorAll(".form__button_select");
            var self = this

            if (selectors) {
              for (var i = 0; i < selectors.length; i++) {

                //when click on selector
                selectors[i].onclick = function(evt) {
                  //manupulations for visual selection
                  let selectorButtons = evt.target.parentNode.querySelectorAll(".form__button_select");
                  for (var j = 0; j < selectorButtons.length; j++) {
                    selectorButtons[j].setAttribute("active", false);
                  }
                  evt.target.setAttribute("active", true);
                  
                  // set price depending on selection
                  self.setPricingParam(evt.target.parentNode.getAttribute("param"), evt.target.getAttribute("data-param"));
                }
              }
            }

            let requestForm = document.querySelector(".form__action");

            requestForm.onclick = function(event) {
              
              event.preventDefault();
              // if all validation goes well
              if (validateForm()) {
                
                for (var i = 0; i < uploadedFiles.length; i++) {
                  self.updloadDocumentToSanity(uploadedFiles[i]); 
                } 
                this.value = 'Отправляю...';
                this.disabled = true;
                this.classList.add("button-loading");
                sendEmail();
                
              } else return false;
            }

            function sendRquestEmail(name, email, phone) {

              let type = pricingParams["type"] == "silver" ? "Пакет Silver | " : "Пакет Gold | ";
              let language = pricingParams["language"] == "english" ? "Документ на английском |" : "Документ на русском |";
              let time = pricingParams["time"] == "urgent" ? " 24 часа" : " 2 дня";
              let docsView = "";
              for (var i = 0; i < linksToTheDocuments.length; i++){
                docsView +=  "<p><a style='font-size: 24px;' href='" + linksToTheDocuments[i] + "'>Документ " + (i+1) + "</a></p>";
              }

              emailjs.send(emailJsService, emailJsTemplate, {
                name: name,
                email: email,
                phone: phone,
                type: type + language + time,
                link: docsView,
                price: calculatedPrice
              })
              .then(function() {
                  //alert('Ваша заявка успешно оправлена');
                  //location.reload();
              }, function(error) {
                  console.log('Failed sendig email', error);
              });
            }

            function sendEmail() {
              //if all files were uploaded
              if (uploadedFilesProgress == uploadedFiles.length) {
                sendRquestEmail(
                  document.querySelector("#name").value,
                  document.querySelector("#email").value,
                  document.querySelector("#phone").value
                );
                uploadedFilesProgress = 0;
                
                let btnSend = document.querySelector(".form__action");
                btnSend.value = 'Отправлено успешно';
                btnSend.className = "form__action";

              } else {
                setTimeout(function(){ sendEmail() }, 500);
              }
            }

            //validation of all input fields
            function validateForm() {
              if (!pricingParams["language"] || !pricingParams["time"]) {
                alert('Для отправки заявки необходимо указать язык документа и срок')
                return false;
              }
              if (!uploadedDocument) {
                alert('Для отправки заявки нужно загрузить документ, с которым будет необходимо работать')
                return false;
              }
              let nameField = document.querySelector("#name");
              if (nameField.value.trim() == "") {
                alert('Пожалуйста, укажите ваше имя, чтобы мы знали как к вам обращаться');
                return false;
              }

              let emailField = document.querySelector("#email");
              if (emailField.value.trim() == "") {
                alert('Укажите адрес электронной почты, чтобы мы знали, как с вами связаться');
                return false;
              }

              let phoneField = document.querySelector("#phone");
              if (phoneField.value.trim() == "") {
                alert('Укажите номер телефона, чтобы мы знали, как с вами связаться');
                return false;
              }

              return true;
            }

            var parentBlockRef = this.parentBlock();
            dropzoneComponent = new Dropzone("#dropzone-component", {
                url: "#",
                paramName: 'file',
                previewsContainer: '.form__upload-doc-name',
                autoQueue: false,
                autoProcessQueue: false,
                addRemoveLinks: false,
                clickable: false,
                thumbnailWidth: 80,
                thumbnailHeight: 100,
                maxFiles: 10,
                acceptedFiles: '.docx, .doc, .txt',
                parallelUploads: 1,
                uploadMultiple: true,
                dictDefaultMessage: 'Или перетащите файлы сюда',
                init: function() {
                  this.on("addedfiles", function() {
                      parentBlockRef.calculateCharNumber(this.files);
                  });
                }
              },
            );

            $('#dropzone-component').on('dragenter', function() {
                $(this).css({'outline' : '2px dashed green'})
            });

            $('#dropzone-component').on('dragleave', function() {
              $(this).css({'outline' : 'none'})
            });
            

        }
    },

    Form__form: {
        tag: 'div',
        expand: function () {

            this.domAttr('action', this.parentBlock().param('action'))
            this.domAttr('id', this.parentBlock().param('id'))

        }
    },

    Form__item: {
        expand: function () {
            this.domAttr('param', this.param('param'))
        }
    },

    Form__title: {
        inherits: 'Typo',
        mod: {
            Text: 'L',
            Line: 'L'
        },
        
    },

    Form__hint: {
        inherits: 'Typo',
        mod: {
            Text: 'L',
            Line: 'L'
        },
        
    },

    Form__button: {
        expand: function () {
            this.domAttr('data-param', this.param('data-param'))
            this.css('background', this.parentBlock().param('color'))
            this.css('color', this.parentBlock().param('text'))
        }
    },

    Form__action: {
        tag: 'input',
        expand: function () {
            this.domAttr('type', 'submit')
            this.domAttr('value', this.text())
            this.css('background', this.parentBlock().param('action'))
            this.css('color', this.parentBlock().param('actionText'))
        }
    },

    Form__input: {
        tag: 'input',
        expand: function () {
            this.domAttr('type', this.param('type'))
            this.domAttr('id', this.param('id'))
            this.domAttr('placeholder', this.param('placeholder'))
            this.domAttr('required', true)
            this.css('background', this.parentBlock().param('color'))
            this.css('color', this.parentBlock().param('text'))

            let root = document.documentElement;
            root.style.setProperty('--formHighlight', this.parentBlock().param('highlight'));
            root.style.setProperty('--formPlaceholder', this.parentBlock().param('text'));
            
        }
    },

    Form__upload: {
        expand: function () {
            this.append(
                <upload-label for="file-upload">Загрузить документы</upload-label>,
                <upload-doc-name></upload-doc-name>,
                <upload-input id="file-upload" type="file"></upload-input>
            )
            this.domAttr('id', 'dropzone-component');
        }
    },

    'Form__upload-label': {
        tag: 'label',
        expand: function () {
            this.domAttr('for', this.param('for'))
            this.css('background', this.parentBlock().param('color'))
            this.css('color', this.parentBlock().param('text'))
        }
    },

    'Form__upload-doc-name': {
        tag: 'div',
        expand: function () {
            this.css('background', this.parentBlock().param('color'))
            this.css('color', this.parentBlock().param('text'))
        }
    },
    
    'Form__upload-input': {
        tag: 'input',
        on: {
            // Listen to change event on file input
            change: function () {
                // add and remove modificator for every change
                this.parentBlock().calculateCharNumber()

            }
        },

        expand: function () {
            this.domAttr('id', this.param('id'))
            this.domAttr('multiple', true)
            this.domAttr('type', this.param('type'))
            // this.domAttr('onchnage', 'calculateCharNumber()')
        }
    },
})




